<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[迷途老码的博客]]></title>
  <link href="http://blog.iosdev.net/atom.xml" rel="self"/>
  <link href="http://blog.iosdev.net/"/>
  <updated>2016-06-17T06:51:15+08:00</updated>
  <id>http://blog.iosdev.net/</id>
  <author>
    <name><![CDATA[photondragon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 微信支付助手 IDNWxPayer]]></title>
    <link href="http://blog.iosdev.net/articles/201606/ios-wei-xin-zhi-fu-zhu-shou-idnwxpayer"/>
    <updated>2016-06-16T23:04:20+08:00</updated>
    <id>http://blog.iosdev.net/articles/201606/ios-wei-xin-zhi-fu-zhu-shou-idnwxpayer</id>
    <content type="html"><![CDATA[<p>demo示例程序 <a href="https://github.com/photondragon/IDNWxPaySample">https://github.com/photondragon/IDNWxPaySample</a>  <br />
示例程序要想正常运行，需要修改项目的 URL Schemes 和application:didFinishLaunchingWithOptions: 中的微信支付的初始化参数（参考后面的“项目准备”一节）</p>

<p>IDNWxPayer 对微信支付ios端的整个支付流程进行了封装，把复杂的细节都屏蔽掉了，对外提供了简单易用的接口（全部都是+方法），下图列出了提供的接口方法：  <br />
<img src="http://res.iosdev.net/images/post/2016-06-16-ios-wei-xin-zhi-fu-zhu-shou-idnwxpayer/20160616-methods.jpg" alt="方法列表" />  <br />
必定要调用的“核心方法”有三个，实际发起支付的方法就一个，其它的所谓“不安全操作”的方法只有在服务端开发没有完成的情况下才有必要使用。  <br />
全部的代码都封装在两个源文件中，IDNWxPayer.h 和 IDNWxPayer.m ，除了微信官方提供的SDK库以外，不依赖任何第三方库。</p>

<!--more-->

<p>如果你发现了任何bug，欢迎<a href="https://github.com/photondragon/IDNWxPaySample/issues" title="提交Issues">提交Issues</a></p>

<h2 id="section">使用方法</h2>

<p>开发环境：xcode 7.3 + OS X EI Capitan 10.11.3</p>

<h3 id="section-1">项目准备</h3>

<ol>
  <li>创建一个全新的xcode项目，加入源文件 IDNWxPayer.h 和 IDNWxPayer.m</li>
  <li>下载 <a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/WeChatSDK1.7.1.zip" title="微信支付官方SDK">微信支付官方SDK</a> ，把解压出来的文件夹 OpenSDK1.7.1 整个加入项目中</li>
  <li>为项目添加 URL Schemes = &lt;你的微信支付的appId&gt;  <br />
 <img src="http://res.iosdev.net/images/post/2016-06-16-ios-wei-xin-zhi-fu-zhu-shou-idnwxpayer/20160616-urlSchemes.jpg" alt="设置URL Schemes" /></li>
  <li>链接这几个库: libc++.tdb, libsqlite3.tbd, libz.tbd, CoreTelephony.framework, SystemConfiguration.framework  <br />
 <img src="http://res.iosdev.net/images/post/2016-06-16-ios-wei-xin-zhi-fu-zhu-shou-idnwxpayer/20160616-link-libs.png" alt="链接库" /></li>
  <li>在 AppDelegate.m 中加入初始化代码，<strong>注意要把初始化参数换成你自己的</strong></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#import "IDNWxPayer.h"
</span><span class="line">
</span><span class="line">// 。。。其它代码。。。
</span><span class="line">
</span><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
</span><span class="line">	
</span><span class="line">	[IDNWxPayer initWithAppId:@"wx1234567812345678" merchantId:@"1234567890"]; //
</span><span class="line">	[IDNWxPayer setMerchantKey:@"12345678901234567890123456789012"]; //设置商户密钥，仅供测试使用
</span><span class="line">	[IDNWxPayer setNotifyUrl:@"http://www.example.com/wxnotify.php"]; //仅供测试使用
</span><span class="line">	
</span><span class="line">	return YES;
</span><span class="line">}
</span><span class="line">
</span><span class="line">// ios &lt; 9.0
</span><span class="line">- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
</span><span class="line">{
</span><span class="line">	if([IDNWxPayer handleOpenURL:url]) //处理从微信客户端跳转回来的url。返回 TRUE 表示成功处理了
</span><span class="line">		return YES;
</span><span class="line">	return NO;
</span><span class="line">}
</span><span class="line">	
</span><span class="line">// ios &gt;= 9.0
</span><span class="line">- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary&lt;NSString *,id&gt; *)options
</span><span class="line">{
</span><span class="line">	if([IDNWxPayer handleOpenURL:url]) //处理从微信客户端跳转回来的url。返回 TRUE 表示成功处理了
</span><span class="line">		return YES;
</span><span class="line">	return NO;
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在你可以开始编写支付代码了，不过在这之前，最好先了解一下微信支付流程</p>

<h3 id="section-2">微信支付流程：</h3>
<ol>
  <li>向微信下单，得到prepayId（建议在服务端实现）</li>
  <li>根据prepayId生成<strong>包含签名</strong>的“支付请求参数”（建议在服务端实现）</li>
  <li>你的客户端发起支付（需要第2步生成的支付请求参数）</li>
  <li>自动跳转到微信客户端，用户付款，成功或取消后会自动跳转回你的客户端（如果付款成功，微信服务器会通知你的服务器）</li>
  <li>你的客户端（向你的服务器）验证支付结果</li>
</ol>

<h3 id="section-3">编写支付代码</h3>

<h4 id="section-4">正常情况😄</h4>

<p>如果你们的服务端小伙伴把微信支付流程的第1，2步都搞定了，把支付请求参数传给了客户端😄，那么你只需要调用 +payWithParams:result: 方法就可以发起微信支付了，示例代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objective-c"><span class="line"><span class="p">[</span><span class="n">IDNWxPayer</span> <span class="nl">payWithParams</span><span class="p">:</span><span class="n">payParams</span> <span class="nl">result</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">){</span>
</span><span class="line">		<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;支付失败：%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">else</span><span class="p">{</span>
</span><span class="line">		<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;支付成功（只是“支付”成功）&quot;</span><span class="p">);</span>
</span><span class="line">		<span class="c1">// todo 这里还要向你的服务器验证支付结果（检测订单是否完成）</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>注意</strong>：result这个block是用来接收支付结果的，error==nil表示支付成功，否则表示支付失败。但是result这个block<strong>不一定会被调用</strong>，因为你可以在跳转到微信客户端后直接关闭微信，然后手动点开自己的应用，而不是让微信自动跳回。这种情况怎么处理可以到 IDNWxPayer.h 里去看函数文档。</p>

<h4 id="section-5">情况2🙁</h4>

<p>如果你们的服务端小伙伴搞定了微信支付流程的第1步，然后给了你一个prepayid🙁，那么你可以调用 +payWithPrepayId:result: 方法发起微信支付，但必须在初始化的时候调用 +setMerchantKey: 设置商户密钥（用于签名），示例代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objective-c"><span class="line"><span class="p">[</span><span class="n">IDNWxPayer</span> <span class="nl">payWithPrepayId</span><span class="p">:</span><span class="n">prepayId</span> <span class="nl">result</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">){</span>
</span><span class="line">		<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;支付失败：%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">else</span><span class="p">{</span>
</span><span class="line">		<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;支付成功（只是“支付”成功）&quot;</span><span class="p">);</span>
</span><span class="line">		<span class="c1">// todo 这里还要向你的服务器验证支付结果（检测订单是否完成）</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-6">情况3😠</h4>

<p>如果你们的服务端小伙伴连微信支付流程的第1步都还没搞定😠，怎么办呢？当然有办法，我们可以自己向微信服务器下单（前提是在初始化的时候设置了merchantKey和notifyUrl）。  <br />
先调用 +prepayWithOrderId:amount:orderTitle:orderDetail:callback: 方法下单（参数你就随便填吧，反正只是测试），下单成功后通过 callback 得到支付请求参数，再调用 +payWithParams:result: 发起支付，示例代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="objective-c"><span class="line"><span class="p">[</span><span class="n">IDNWxPayer</span> <span class="nl">prepayWithOrderId</span><span class="p">:</span><span class="n">orderId</span> <span class="nl">amount</span><span class="p">:</span><span class="n">amount</span> <span class="nl">orderTitle</span><span class="p">:</span><span class="n">orderTitle</span> <span class="nl">orderDetail</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">callback</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">payParams</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">){</span>
</span><span class="line">		<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;下单失败：%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">);</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="k">else</span><span class="p">{</span>
</span><span class="line">		<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;下单成功：%@&quot;</span><span class="p">,</span> <span class="n">payParams</span><span class="p">);</span>
</span><span class="line">		<span class="c1">// 发起微信支付</span>
</span><span class="line">		<span class="p">[</span><span class="n">IDNWxPayer</span> <span class="nl">payWithParams</span><span class="p">:</span><span class="n">payParams</span> <span class="nl">result</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">			<span class="c1">// ...此处省略处理支付结果的代码...</span>
</span><span class="line">		<span class="p">}];</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line"><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-7">参考</h2>
<ol>
  <li><a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_5" title="微信支付官方IOS文档">微信支付官方IOS文档</a></li>
  <li><a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=11_1" title="微信支付全部 SDK 下载页面">微信支付全部 SDK 下载页面</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode代码片段Snippets]]></title>
    <link href="http://blog.iosdev.net/articles/201507/xcodedai-ma-pian-duan"/>
    <updated>2015-07-16T22:53:21+08:00</updated>
    <id>http://blog.iosdev.net/articles/201507/xcodedai-ma-pian-duan</id>
    <content type="html"><![CDATA[<p>代码片段Snippets主要用于加速代码的输入速度。通过把常用的代码设置为Snippet，并分配一个简短的快捷字符串，你只需要输入这个快捷字符串，再按下tab键，xcode就会自动帮你输入预设的代码段。</p>

<!--more-->

<p>#创建代码段</p>

<p>选中一段代码，然后拖到右下角的Code Snippet Library窗口中，将创建一个自定义代码块。滚动列表到最下面，你将看到刚刚新建的代码片段，如下图</p>

<p><img src="http://blog.iosdev.net/images/post/2015-07-16-xcodedai-ma-pian-duan/snippets-1.jpg" alt="snippets-1" /></p>

<p>双击刚刚新建的代码片段”My Code Snippet”，在弹出窗口中点”Edit”按钮</p>

<p><img src="http://blog.iosdev.net/images/post/2015-07-16-xcodedai-ma-pian-duan/snippets-2.jpg" alt="snippets-2" /></p>

<p>然后分别输入  <br />
1. 代码片段的名称，比如：Table View Sections  <br />
2. 代码片段的快捷键，比如：tablesections  <br />
3. 占位符，比如：&lt;#number of section#&gt;</p>

<p><img src="http://blog.iosdev.net/images/post/2015-07-16-xcodedai-ma-pian-duan/snippets-3.jpg" alt="snippets-3" /></p>

<p>然后在@implementation~@end块中输入tablesections，将弹出代码片段提示框，选中你想要的代码片段，按回车</p>

<p><img src="http://blog.iosdev.net/images/post/2015-07-16-xcodedai-ma-pian-duan/snippets-4.jpg" alt="snippets-4" /></p>

<p>#保存代码片段到github</p>

<p>Xcode代码段默认保存在<code>~/Library/Developer/Xcode/UserData/CodeSnippets</code>目录下  <br />
首先登录github网站，新建一个代码仓库，比如我的代码仓库地址为https://github.com/photondragon/xcodesnippets  <br />
然后打开终端，输入如下指令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ~/Library/Developer/Xcode/UserData/CodeSnippets
</span><span class="line">git init
</span><span class="line">git remote add origin git@github.com:photondragon/xcodesnippets.git
</span><span class="line">git push origin master</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>#将代码片段部署到新机器上</p>

<p>打开终端，输入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mkdir -p ~/Library/Developer/Xcode/UserData/CodeSnippets
</span><span class="line">cd ~/Library/Developer/Xcode/UserData/CodeSnippets
</span><span class="line">git init
</span><span class="line">git remote add origin https://github.com/photondragon/xcodesnippets.git
</span><span class="line">git pull origin master</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试]]></title>
    <link href="http://blog.iosdev.net/articles/201506/ce-shi"/>
    <updated>2015-06-21T03:27:25+08:00</updated>
    <id>http://blog.iosdev.net/articles/201506/ce-shi</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">一级标题1</a>    <ul>
      <li><a href="#section-1" id="markdown-toc-section-1">二级标题11</a></li>
      <li><a href="#section-2" id="markdown-toc-section-2">二级标题12</a>        <ul>
          <li><a href="#section-3" id="markdown-toc-section-3">三级标题121</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>这是摘要部分<br />
<!--more--></p>

<h1 id="section">一级标题1</h1>

<h2 id="section-1">二级标题11</h2>

<h2 id="section-2">二级标题12</h2>

<h3 id="section-3">三级标题121</h3>

<p>这是正文部分</p>

<script type="math/tex; mode=display">f'\left( x\right) = \lim _{x\rightarrow 0}\dfrac {f\left( x+\Delta x\right) - f\left( x\right)}{\Delta x}</script>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>这是标题 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">@interface</span> <span class="bp">UIView</span><span class="nl">(IDNKeyboard)</span>
</span><span class="line">
</span><span class="line"><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span><span class="k">strong</span><span class="p">)</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">keyboardFrameWillChangeBlock</span><span class="p">)(</span><span class="n">CGFloat</span> <span class="n">bottomDistance</span><span class="p">,</span> <span class="kt">double</span> <span class="n">animationDuration</span><span class="p">,</span> <span class="n">UIViewAnimationCurve</span> <span class="n">animationCurve</span><span class="p">);</span> <span class="c1">//当键盘Frame改变时此Block被调用。bottomDistance是键盘顶部与self视图底部的距离；animationDuration是键盘动画持续时间</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre lang="ruby"><code>def hello
  puts "hello world"
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[欢迎来到迷途老码的博客]]></title>
    <link href="http://blog.iosdev.net/articles/201506/huan-ying"/>
    <updated>2015-06-18T00:51:59+08:00</updated>
    <id>http://blog.iosdev.net/articles/201506/huan-ying</id>
    <content type="html"><![CDATA[<p>欢迎来到迷途老码的博客</p>
]]></content>
  </entry>
  
</feed>
